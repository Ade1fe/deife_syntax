<!DOCTYPE html>
<html>
<head>
  <title>Tic Tac Toe</title>
  <style>
    .container {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    .board {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-gap: 10px;
    }
    .cell {
      width: 100px;
      height: 100px;
      background-color: #eee;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 48px;
      cursor: pointer;
    }
    .cell:hover {
      background-color: #ddd;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="board"></div>
  </div>

  <script>
    // Create an empty game board
    let board = ["", "", "", "", "", "", "", "", ""];

    // Current player
    let currentPlayer = "X";

    // Winning combinations
    const winningCombinations = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];

    // Render the game board
    function renderBoard() {
      const boardElement = document.querySelector(".board");
      boardElement.innerHTML = "";

      for (let i = 0; i < board.length; i++) {
        const cell = document.createElement("div");
        cell.className = "cell";
        cell.dataset.index = i;
        cell.innerText = board[i];
        cell.addEventListener("click", handleCellClick);
        boardElement.appendChild(cell);
      }
    }

    // Handle cell click event
    function handleCellClick(event) {
      const cellIndex = event.target.dataset.index;

      // Check if the cell is already occupied
      if (board[cellIndex] !== "") {
        return;
      }

      // Update the board with the current player
      board[cellIndex] = currentPlayer;

      // Check for a win or a draw
      if (checkWin() || checkDraw()) {
        setTimeout(resetGame, 1000);
      } else {
        // Switch to the next player
        currentPlayer = currentPlayer === "X" ? "O" : "X";
      }

      // Re-render the game board
      renderBoard();
    }

    // Check for a win
    function checkWin() {
      for (let combination of winningCombinations) {
        const [a, b, c] = combination;
        if (
          board[a] !== "" &&
          board[a] === board[b] &&
          board[b] === board[c]
        ) {
          return true;
        }
      }
      return false;
    }

    // Check for a draw
    function checkDraw() {
      return !board.includes("");
    }

    // Reset the game
    function resetGame() {
      board = ["", "", "", "", "", "", "", "", ""];
      currentPlayer = "X";
      renderBoard();
    }

    // Initial render
    renderBoard();
  </script>
</body>
</html>
